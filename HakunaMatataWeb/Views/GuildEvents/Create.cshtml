@model HakunaMatataWeb.Models.GuildEventModels.GuildEventViewModel
@using HakunaMatataWeb.Data.Enums

@{
	ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)

	<div class="form-horizontal">
		<h4>GuildEvent</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="form-group">
			@Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.EventType, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EnumDropDownListFor(model => model.EventType, htmlAttributes: new { @class = "form-control" })
				@Html.ValidationMessageFor(model => model.EventType, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.IsUniqueEvent, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.IsUniqueEvent)
					@Html.ValidationMessageFor(model => model.IsUniqueEvent, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.IsMonthly, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.IsMonthly)
					@Html.ValidationMessageFor(model => model.IsMonthly, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.IsWeekly, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.IsWeekly)
					@Html.ValidationMessageFor(model => model.IsWeekly, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.IsBiWeekly, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.IsBiWeekly)
					@Html.ValidationMessageFor(model => model.IsBiWeekly, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.MinLevel, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MinLevel, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MinLevel, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.MaxLevel, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MaxLevel, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MaxLevel, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Featured, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.Featured)
					@Html.ValidationMessageFor(model => model.Featured, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group datetimepicker">
			@Html.LabelFor(model => model.FirstEventDate, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="input-group date" id="datetimepicker1" data-target-input="nearest">
					@Html.EditorFor(model => model.FirstEventDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#datetimepicker1" } })
					<div class="input-group-append" data-target="#datetimepicker1" data-toggle="datetimepicker">
						<div class="input-group-text"><i class="fa fa-calendar"></i></div>
					</div>
					@Html.ValidationMessageFor(model => model.FirstEventDate, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.LastEventDate, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="input-group date" id="datetimepicker2" data-target-input="nearest">
					@Html.EditorFor(model => model.LastEventDate, new { htmlAttributes = new { @class = "form-control datetimepicker-input", data_target = "#datetimepicker2" } })
					<div class="input-group-append" data-target="#datetimepicker2" data-toggle="datetimepicker">
						<div class="input-group-text"><i class="fa fa-calendar"></i></div>
					</div>
					@Html.ValidationMessageFor(model => model.LastEventDate, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Create" class="btn btn-default" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
	@Scripts.Render("~/bundles/datetime")
	<script type="text/javascript" src="~/Scripts/MarkdownConverter.js"></script>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.0-alpha14/js/tempusdominus-bootstrap-4.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.0-alpha14/css/tempusdominus-bootstrap-4.min.css" />
	<script type="text/javascript">
		$(function () {
			$.validator.methods.date = function (value, element) {
				return this.optional(element) || moment(value, "DD/MM/YYYY HH:mm", true).isValid();
			}
		});

		$(document).ready(function () {
			var t = moment().add(7, 'days');

			//var fromDate = $('#datetimepicker1');
			//var fdChild = $('#datetimepicker1:nth-child(3)');
			//var toDate = $('#datetimepicker1');

			//fromDate.on("focusout", function () {
			//	fromDate.datetimepicker(fromDate.find('.bootstrap-datetimepicker-widget').hide());
			//})

			//fromDate.on("focus", function () {
			//	fromDate.datetimepicker(fromDate.find('.bootstrap-datetimepicker-widget').show());
			//})

			var test;

			$('.datetimepicker-input').on('focus', function (e) {
				test = $(this);
				$(this).siblings().find('.input-group-text').click();
			})

			$('#datetimepicker1').datetimepicker(
				{
					sideBySide: true,
					//maxDate: $('#datetimepicker2').datetimepicker('date'),
					date: moment(),
					allowInputToggle: true,
					format: 'DD/MM/YYYY HH:mm'
				}
			);
			$('#datetimepicker2').datetimepicker(
				{
					sideBySide: true,
					//minDate: $('#datetimepicker1').datetimepicker('date'),
					date: t,
					allowInputToggle: true,
					format: 'DD/MM/YYYY HH:mm'
				}
			);
		});
	</script>
}